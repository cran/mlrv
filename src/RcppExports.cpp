// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// loc_constant
arma::mat loc_constant(double bw, arma::vec x, arma::mat y, bool db_kernel);
RcppExport SEXP _mlrv_loc_constant(SEXP bwSEXP, SEXP xSEXP, SEXP ySEXP, SEXP db_kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type db_kernel(db_kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(loc_constant(bw, x, y, db_kernel));
    return rcpp_result_gen;
END_RCPP
}
// LocLinear
List LocLinear(double bw, arma::vec t, arma::vec y, arma::mat X, bool db_kernel, bool deriv2, bool scb);
RcppExport SEXP _mlrv_LocLinear(SEXP bwSEXP, SEXP tSEXP, SEXP ySEXP, SEXP XSEXP, SEXP db_kernelSEXP, SEXP deriv2SEXP, SEXP scbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type db_kernel(db_kernelSEXP);
    Rcpp::traits::input_parameter< bool >::type deriv2(deriv2SEXP);
    Rcpp::traits::input_parameter< bool >::type scb(scbSEXP);
    rcpp_result_gen = Rcpp::wrap(LocLinear(bw, t, y, X, db_kernel, deriv2, scb));
    return rcpp_result_gen;
END_RCPP
}
// sim_T
arma::vec sim_T(arma::mat X, arma::vec t, arma::cube sigma, int m, int B, int type);
RcppExport SEXP _mlrv_sim_T(SEXP XSEXP, SEXP tSEXP, SEXP sigmaSEXP, SEXP mSEXP, SEXP BSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_T(X, t, sigma, m, B, type));
    return rcpp_result_gen;
END_RCPP
}
// Diff1
arma::cube Diff1(arma::vec e, arma::mat X, int m, double tau_n, int ind);
RcppExport SEXP _mlrv_Diff1(SEXP eSEXP, SEXP XSEXP, SEXP mSEXP, SEXP tau_nSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type e(eSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type tau_n(tau_nSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(Diff1(e, X, m, tau_n, ind));
    return rcpp_result_gen;
END_RCPP
}
// DiffX
arma::cube DiffX(arma::mat X, int m, double tau_n, int ind);
RcppExport SEXP _mlrv_DiffX(SEXP XSEXP, SEXP mSEXP, SEXP tau_nSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type tau_n(tau_nSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(DiffX(X, m, tau_n, ind));
    return rcpp_result_gen;
END_RCPP
}
// DiffA
arma::cube DiffA(arma::vec y, arma::mat X, int m, double tau_n, int ind);
RcppExport SEXP _mlrv_DiffA(SEXP ySEXP, SEXP XSEXP, SEXP mSEXP, SEXP tau_nSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type tau_n(tau_nSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(DiffA(y, X, m, tau_n, ind));
    return rcpp_result_gen;
END_RCPP
}
// Heter_LRV
arma::cube Heter_LRV(arma::vec e, arma::mat X, int m, double tau_n, int lrv_method, int ind, bool print_deg, bool rescale);
RcppExport SEXP _mlrv_Heter_LRV(SEXP eSEXP, SEXP XSEXP, SEXP mSEXP, SEXP tau_nSEXP, SEXP lrv_methodSEXP, SEXP indSEXP, SEXP print_degSEXP, SEXP rescaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type e(eSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type tau_n(tau_nSEXP);
    Rcpp::traits::input_parameter< int >::type lrv_method(lrv_methodSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    Rcpp::traits::input_parameter< bool >::type print_deg(print_degSEXP);
    Rcpp::traits::input_parameter< bool >::type rescale(rescaleSEXP);
    rcpp_result_gen = Rcpp::wrap(Heter_LRV(e, X, m, tau_n, lrv_method, ind, print_deg, rescale));
    return rcpp_result_gen;
END_RCPP
}
// sim_Phi_heter
arma::vec sim_Phi_heter(List data, int B, arma::cube sigma, arma::cube R);
RcppExport SEXP _mlrv_sim_Phi_heter(SEXP dataSEXP, SEXP BSEXP, SEXP sigmaSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_Phi_heter(data, B, sigma, R));
    return rcpp_result_gen;
END_RCPP
}
// sim_Phi_heter_RS
arma::vec sim_Phi_heter_RS(List data, int B, arma::cube sigma, arma::cube R);
RcppExport SEXP _mlrv_sim_Phi_heter_RS(SEXP dataSEXP, SEXP BSEXP, SEXP sigmaSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_Phi_heter_RS(data, B, sigma, R));
    return rcpp_result_gen;
END_RCPP
}
// sim_Phi_heter_KS
arma::vec sim_Phi_heter_KS(List data, int B, arma::cube sigma, arma::cube R);
RcppExport SEXP _mlrv_sim_Phi_heter_KS(SEXP dataSEXP, SEXP BSEXP, SEXP sigmaSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_Phi_heter_KS(data, B, sigma, R));
    return rcpp_result_gen;
END_RCPP
}
// sim_Phi_heter_VS
arma::vec sim_Phi_heter_VS(List data, int B, arma::cube sigma, arma::cube R);
RcppExport SEXP _mlrv_sim_Phi_heter_VS(SEXP dataSEXP, SEXP BSEXP, SEXP sigmaSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_Phi_heter_VS(data, B, sigma, R));
    return rcpp_result_gen;
END_RCPP
}
// gcv_cov
double gcv_cov(double bw, arma::vec t, arma::vec y, arma::mat X, bool verbose);
RcppExport SEXP _mlrv_gcv_cov(SEXP bwSEXP, SEXP tSEXP, SEXP ySEXP, SEXP XSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(gcv_cov(bw, t, y, X, verbose));
    return rcpp_result_gen;
END_RCPP
}
// MV_critical
arma::mat MV_critical(arma::vec y, List data, arma::cube R, arma::vec gridm, arma::vec gridtau, int type, double cvalue, int B, int lrvmethod, int ind, bool rescale);
RcppExport SEXP _mlrv_MV_critical(SEXP ySEXP, SEXP dataSEXP, SEXP RSEXP, SEXP gridmSEXP, SEXP gridtauSEXP, SEXP typeSEXP, SEXP cvalueSEXP, SEXP BSEXP, SEXP lrvmethodSEXP, SEXP indSEXP, SEXP rescaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gridm(gridmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gridtau(gridtauSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type cvalue(cvalueSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type lrvmethod(lrvmethodSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    Rcpp::traits::input_parameter< bool >::type rescale(rescaleSEXP);
    rcpp_result_gen = Rcpp::wrap(MV_critical(y, data, R, gridm, gridtau, type, cvalue, B, lrvmethod, ind, rescale));
    return rcpp_result_gen;
END_RCPP
}
// MV_ise_heter_critical
List MV_ise_heter_critical(arma::mat critical, int neighbour);
RcppExport SEXP _mlrv_MV_ise_heter_critical(SEXP criticalSEXP, SEXP neighbourSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type critical(criticalSEXP);
    Rcpp::traits::input_parameter< int >::type neighbour(neighbourSEXP);
    rcpp_result_gen = Rcpp::wrap(MV_ise_heter_critical(critical, neighbour));
    return rcpp_result_gen;
END_RCPP
}
// MV_ise_heter
List MV_ise_heter(arma::cube lrv_cub, int dim, int n, int neighbour);
RcppExport SEXP _mlrv_MV_ise_heter(SEXP lrv_cubSEXP, SEXP dimSEXP, SEXP nSEXP, SEXP neighbourSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type lrv_cub(lrv_cubSEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type neighbour(neighbourSEXP);
    rcpp_result_gen = Rcpp::wrap(MV_ise_heter(lrv_cub, dim, n, neighbour));
    return rcpp_result_gen;
END_RCPP
}
// MV_cov_heter
arma::cube MV_cov_heter(arma::vec e, arma::mat X, Rcpp::IntegerVector gridm, Rcpp::NumericVector gridtau, int lrv_method, int ind);
RcppExport SEXP _mlrv_MV_cov_heter(SEXP eSEXP, SEXP XSEXP, SEXP gridmSEXP, SEXP gridtauSEXP, SEXP lrv_methodSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type e(eSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type gridm(gridmSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gridtau(gridtauSEXP);
    Rcpp::traits::input_parameter< int >::type lrv_method(lrv_methodSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(MV_cov_heter(e, X, gridm, gridtau, lrv_method, ind));
    return rcpp_result_gen;
END_RCPP
}
// MV_critical_cp
arma::mat MV_critical_cp(arma::vec y, arma::mat X, arma::vec t, arma::vec gridm, arma::vec gridtau, double cvalue, int B, int lrvmethod, int ind, bool rescale);
RcppExport SEXP _mlrv_MV_critical_cp(SEXP ySEXP, SEXP XSEXP, SEXP tSEXP, SEXP gridmSEXP, SEXP gridtauSEXP, SEXP cvalueSEXP, SEXP BSEXP, SEXP lrvmethodSEXP, SEXP indSEXP, SEXP rescaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gridm(gridmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gridtau(gridtauSEXP);
    Rcpp::traits::input_parameter< double >::type cvalue(cvalueSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type lrvmethod(lrvmethodSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    Rcpp::traits::input_parameter< bool >::type rescale(rescaleSEXP);
    rcpp_result_gen = Rcpp::wrap(MV_critical_cp(y, X, t, gridm, gridtau, cvalue, B, lrvmethod, ind, rescale));
    return rcpp_result_gen;
END_RCPP
}
// Ctvfdiff
arma::vec Ctvfdiff(arma::vec x, arma::vec d, int burnin);
RcppExport SEXP _mlrv_Ctvfdiff(SEXP xSEXP, SEXP dSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(Ctvfdiff(x, d, burnin));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mlrv_loc_constant", (DL_FUNC) &_mlrv_loc_constant, 4},
    {"_mlrv_LocLinear", (DL_FUNC) &_mlrv_LocLinear, 7},
    {"_mlrv_sim_T", (DL_FUNC) &_mlrv_sim_T, 6},
    {"_mlrv_Diff1", (DL_FUNC) &_mlrv_Diff1, 5},
    {"_mlrv_DiffX", (DL_FUNC) &_mlrv_DiffX, 4},
    {"_mlrv_DiffA", (DL_FUNC) &_mlrv_DiffA, 5},
    {"_mlrv_Heter_LRV", (DL_FUNC) &_mlrv_Heter_LRV, 8},
    {"_mlrv_sim_Phi_heter", (DL_FUNC) &_mlrv_sim_Phi_heter, 4},
    {"_mlrv_sim_Phi_heter_RS", (DL_FUNC) &_mlrv_sim_Phi_heter_RS, 4},
    {"_mlrv_sim_Phi_heter_KS", (DL_FUNC) &_mlrv_sim_Phi_heter_KS, 4},
    {"_mlrv_sim_Phi_heter_VS", (DL_FUNC) &_mlrv_sim_Phi_heter_VS, 4},
    {"_mlrv_gcv_cov", (DL_FUNC) &_mlrv_gcv_cov, 5},
    {"_mlrv_MV_critical", (DL_FUNC) &_mlrv_MV_critical, 11},
    {"_mlrv_MV_ise_heter_critical", (DL_FUNC) &_mlrv_MV_ise_heter_critical, 2},
    {"_mlrv_MV_ise_heter", (DL_FUNC) &_mlrv_MV_ise_heter, 4},
    {"_mlrv_MV_cov_heter", (DL_FUNC) &_mlrv_MV_cov_heter, 6},
    {"_mlrv_MV_critical_cp", (DL_FUNC) &_mlrv_MV_critical_cp, 10},
    {"_mlrv_Ctvfdiff", (DL_FUNC) &_mlrv_Ctvfdiff, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_mlrv(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
